from decimal import Decimal
import re
from typing import Callable

# -- variant 1
# def generator_numbers(text: str):
#     pattern = r'\d+\.\d{2}'
#     numbers_input = re.findall(pattern, text)
#     return map(lambda number: Decimal(number), numbers_input)

# -- variant 2
def generator_numbers(text: str):
    """
    Generator yielding Decimal numbers extracted from the text.
    
    :param text: Input string containing decimal numbers.
    :return: Generator of Decimal objects.
    """
    pattern = r"(?<=\s)\d+(?:\.\d+)?(?=\s|$)"
    for number in re.findall(pattern, text.strip()):
        yield Decimal(number)
    
def sum_profit(text: str, func: Callable):
    """
    Returns the total sum of Decimal numbers generated by the given function.

    :param text: Input string containing decimal numbers.
    :param func: Generator function to extract decimal numbers.
    :return: Total sum as a Decimal object.
    """
    return sum(func(text))

text = " 1000 Загальний дохід працівника складається з декількох частин: 1000.01 як основний дохід, доповнений додатковими надходженнями 27.45 і 324.00 доларів."
total_income = sum_profit(text, generator_numbers)
print(f"Загальний дохід: {total_income}")
